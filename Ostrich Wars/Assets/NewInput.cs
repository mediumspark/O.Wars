//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/NewInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewInput"",
    ""maps"": [
        {
            ""name"": ""NormalEvent"",
            ""id"": ""4b47f435-aea4-481a-a2bd-61e895cc934f"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""54679b7b-97f4-4a7b-9d46-353e8a72c952"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""193d7df0-b10b-4e34-b992-c947fb13a3b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d7d784c-a314-423c-8847-439f29e4ec60"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6b0f716-4576-405b-aa0b-79753adc15c6"",
                    ""path"": ""<Touchscreen>/touch0/tap"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0638974-bc1e-41d2-bcde-3376570a6cc2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""837ef8ea-1d5e-431e-941a-b3c0f43560ee"",
                    ""path"": ""<Touchscreen>/touch0/tap"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // NormalEvent
        m_NormalEvent = asset.FindActionMap("NormalEvent", throwIfNotFound: true);
        m_NormalEvent_Select = m_NormalEvent.FindAction("Select", throwIfNotFound: true);
        m_NormalEvent_Deselect = m_NormalEvent.FindAction("Deselect", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NormalEvent
    private readonly InputActionMap m_NormalEvent;
    private INormalEventActions m_NormalEventActionsCallbackInterface;
    private readonly InputAction m_NormalEvent_Select;
    private readonly InputAction m_NormalEvent_Deselect;
    public struct NormalEventActions
    {
        private @NewInput m_Wrapper;
        public NormalEventActions(@NewInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_NormalEvent_Select;
        public InputAction @Deselect => m_Wrapper.m_NormalEvent_Deselect;
        public InputActionMap Get() { return m_Wrapper.m_NormalEvent; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NormalEventActions set) { return set.Get(); }
        public void SetCallbacks(INormalEventActions instance)
        {
            if (m_Wrapper.m_NormalEventActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_NormalEventActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_NormalEventActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_NormalEventActionsCallbackInterface.OnSelect;
                @Deselect.started -= m_Wrapper.m_NormalEventActionsCallbackInterface.OnDeselect;
                @Deselect.performed -= m_Wrapper.m_NormalEventActionsCallbackInterface.OnDeselect;
                @Deselect.canceled -= m_Wrapper.m_NormalEventActionsCallbackInterface.OnDeselect;
            }
            m_Wrapper.m_NormalEventActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Deselect.started += instance.OnDeselect;
                @Deselect.performed += instance.OnDeselect;
                @Deselect.canceled += instance.OnDeselect;
            }
        }
    }
    public NormalEventActions @NormalEvent => new NormalEventActions(this);
    public interface INormalEventActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
    }
}
